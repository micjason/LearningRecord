(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{309:function(e,a,t){"use strict";t.r(a);var s=t(38),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"vue路由"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue路由"}},[e._v("#")]),e._v(" vue路由")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("定义一个router文件夹，新建"),t("code",[e._v("index.js")]),e._v("，引入vue和vue-router，然后引入各个组件，"),t("code",[e._v("Vue.use(Router)")]),e._v(",编写路由规则，\n"),t("code",[e._v("export default new Router(routes:[规则])")]),e._v("\n在"),t("code",[e._v("main.js")]),e._v("里面引入"),t("code",[e._v("index.js")]),e._v(","),t("code",[e._v("Vue.use(router)")]),e._v(",挂载在到实例上")])]),e._v(" "),t("li",[t("p",[e._v("动态路由匹配")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("{\n      path: '/pageb/:id',\n      name: 'pageB',\n      component: pageB\n}\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<div @click=\"jump('/pageB/bar')\">导向B-bar</div>\n<div @click=\"jump('/pageB/foo')\">导向B-foo</div>\n")])])]),t("p",[e._v("此时bar跳到foo不会触发页面的生命周期钩子，复用组件时，想对路由参数的变化作出响应的话，你可以简单地 watch (监测变化) "),t("code",[e._v("$route")]),e._v(" 对象：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$route(to, from) {\n    console.log(this.$route.params, to, from)\n}\n")])])]),t("p",[e._v("常规参数只会匹配被 / 分隔的 URL 片段中的字符。如果想匹配任意路径，我们可以使用通配符 (*)：")]),e._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[e._v("嵌套路由")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("children: [\n        {\n          path: '/pageb2',\n          name: 'pageB2',\n          component: pageB2\n        },\n        {\n          path: '/pageb3',\n          name: 'pageB3',\n          component: pageB3\n        }\n      ]\n")])])]),t("p",[e._v("然后就可以在子组件里面使用router-view了")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<div @click=\"jump('/pageb2')\">page2</div>\n<div @click=\"jump('/pageb3')\">page3</div>\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("jump(src) {\n      this.$router.push({\n        path: src\n      })\n}\n")])])]),t("ol",{attrs:{start:"4"}},[t("li",[e._v("编程式的导航"),t("code",[e._v("this.$router.push")])])]),e._v(" "),t("ul",[t("li",[e._v("字符串  字符串路径\n"),t("code",[e._v("router.push('home')")])]),e._v(" "),t("li",[e._v("对象\n"),t("code",[e._v("router.push({ path: 'home' })")])]),e._v(" "),t("li",[e._v("命名的路由\n"),t("code",[e._v("router.push({ name: 'user', params: { userId: '123' }})")])]),e._v(" "),t("li",[e._v("带查询参数，变成 "),t("code",[e._v("/register?plan=private")]),e._v(" "),t("code",[e._v("router.push({ path: 'register', query: { plan: 'private' }})")])])]),e._v(" "),t("p",[e._v("注意：如果提供了 path，params 会被忽略，上述例子中的 query 并不属于这种情况。取而代之的是下面例子的做法，你需要提供路由的 name 或手写完整的带有参数的 path：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const userId = '123'\nrouter.push({ name: 'user', params: { userId }}) // -> /user/123\nrouter.push({ path: `/user/${userId}` }) // -> /user/123\n")])])]),t("p",[e._v("// 这里的 params 不生效\n"),t("code",[e._v("router.push({ path: '/user', params: { userId }}) // -> /user")])])])}),[],!1,null,null,null);a.default=r.exports}}]);